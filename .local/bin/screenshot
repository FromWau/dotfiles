#!/usr/bin/env bash

set -e

AVAILABLE_MODES=(output window region)

function Help() {
    cat <<EOF
Usage: screenshot [options ..] -m [mode] -- [command]

screenshot is an utility to easily take screenshot in Hyprland using your mouse.

It allows taking screenshots of windows, regions and monitors which are saved to a folder of your choosing and copied to your clipboard.

Options:
  -h, --help            show help message
  -m, --mode            one of: output, window, region
  -o, --output-folder   directory in which to save screenshot
  -f, --filename        the file name of the resulting screenshot
  -z, --freeze          freeze the screen on initialization
  -e, --edit            edit the screenshot
  -d, --debug           print debug information
  -s, --silent          don't send notification when screenshot is saved
  -c, --clipboard-only  copy screenshot to clipboard and don't save image in disk
  -- [command]          open screenshot with a command of your choosing. e.g. screenshot -m window -- mirage

Modes:
  output                take screenshot of an entire monitor
  window                take screenshot of an open window
  region                take screenshot of selected region
EOF
}

function Print() {
    if [ $DEBUG -eq 0 ]; then
        return 0
    fi

    printf 1>&2 "$@"
}

function send_notification() {
    if [ $SILENT -eq 1 ]; then
        return 0
    fi
    notify-send "Screenshot saved" \
        "Image saved in <i>${1}</i> and copied to the clipboard." \
        -i "${1}" -a screenshot
}

function save_geometry() {
    Print "Geometry: %s\n" "${1}"

    if [ $EDIT -eq 1 ]; then
        if [ $CLIPBOARD -eq 0 ]; then
            grim -g "${1}" - | convert - -trim +repage - | swappy -f - -o - 2>/dev/null

        else
            wl-copy < <(grim -g "${1}" - | convert - -trim +repage - | swappy -f - -o - 2>/dev/null)
        fi

        return
    fi

    if [ $CLIPBOARD -eq 0 ]; then
        mkdir -p "$SAVEDIR"
        grim -g "${1}" "$SAVE_FULLPATH"
        local output="$SAVE_FULLPATH"
        # Trim transparent pixels, in case the window was floating and partially
        # outside the monitor
        convert $output -trim +repage $output
        wl-copy <"$output"
        send_notification $output
        [ -z "$COMMAND" ] || {
            "$COMMAND" "$output"
        }
    else
        wl-copy < <(grim -g "${1}" - | convert - -trim +repage -)
    fi
}

function checkRunning() {
    sleep 1
    while [[ 1 == 1 ]]; do
        if [[ $(pgrep slurp | wc -m) == 0 ]]; then
            pkill hyprpicker
            exit
        fi
    done
}

function begin_grab() {
    if [ $FREEZE -eq 1 ] && [ "$(command -v "hyprpicker")" ] >/dev/null 2>&1; then
        hyprpicker -r -z &
        sleep 0.2
        HYPRPICKER_PID=$!
    fi
    local option=$1
    case $option in
    output)
        local geometry=$(grab_output)
        ;;
    region)
        local geometry=$(grab_region)
        ;;
    window)
        local geometry=$(grab_window)
        ;;
    esac
    save_geometry "${geometry}"
}

function grab_output() {
    slurp -or
}

function grab_region() {
    slurp -d
}

function grab_window() {
    local monitors=$(hyprctl -j monitors)
    local clients=$(hyprctl -j clients | jq -r '[.[] | select(.workspace.id | contains('$(echo $monitors | jq -r 'map(.activeWorkspace.id) | join(",")')'))]')
    Print "Monitors: %s\n" "$monitors"
    Print "Clients: %s\n" "$clients"
    # Generate boxes for each visible window and send that to slurp
    # through stdin
    local boxes="$(echo $clients | jq -r '.[] | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1]) \(.title)"')"
    Print "Boxes:\n%s\n" "$boxes"
    slurp -r <<<"$boxes"
}

function args() {
    local options=$(getopt -o hf:o:m:ecdsz --long help,filename:,output-folder:,mode:,clipboard-only,edit,debug,silent,freeze -- "$@")
    eval set -- "$options"

    while true; do
        case "$1" in
        -h | --help)
            Help
            exit
            ;;
        -o | --output-folder)
            shift
            SAVEDIR=$1
            ;;
        -f | --filename)
            shift
            FILENAME=$1
            ;;
        -z | --freeze)
            FREEZE=1
            ;;
        -m | --mode)
            shift
            echo "${AVAILABLE_MODES[@]}" | grep -wq $1
            OPTION=$1
            ;;
        -e | --edit)
            EDIT=1
            ;;
        -c | --clipboard-only)
            CLIPBOARD=1
            ;;
        -d | --debug)
            DEBUG=1
            ;;
        -s | --silent)
            SILENT=1
            ;;
        --)
            shift # Skip -- argument
            COMMAND=${@:2}
            break
            ;;
        esac
        shift
    done

    if [ -z $OPTION ]; then
        Print "A mode is required\n\nAvailable modes are:\n\toutput\n\tregion\n\twindow\n"
        exit 2
    fi
}

if [ -z $1 ]; then
    Help
    exit
fi

EDIT=0
CLIPBOARD=0
DEBUG=0
SILENT=0
FREEZE=0
FILENAME="$(date +'%Y-%m-%d-%H%M%S_screenshot.png')"
[ -z "$screenshot_DIR" ] && SAVEDIR=${XDG_PICTURES_DIR:=~} || SAVEDIR=${screenshot_DIR}

args $0 "$@"

SAVE_FULLPATH="$SAVEDIR/$FILENAME"
[ $CLIPBOARD -eq 0 ] && Print "Saving in: %s\n" "$SAVE_FULLPATH"
begin_grab $OPTION & checkRunning
