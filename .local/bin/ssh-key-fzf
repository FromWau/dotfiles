#!/usr/bin/env bash

export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR"/ssh-agent.socket

setup-ssh-key() {
	echo "Setting up ssh key."
	read -p "Enter your email: " -r email

	ssh-keygen -q -t ed25519 -C "$email"
	##  If you are using a legacy system that doesn't support the Ed25519 algorithm, use:
	# ssh-keygen -q  -t rsa -b 4096 -C "$email"

	# Set the permissions of the ssh folder and the keys
	fd . --base-directory ~/.ssh/ --strip-cwd-prefix -E '*.pub' -E '*hosts*' -E 'config' -x chmod 600 {}

	wl-copy <"$HOME"/.ssh/id_ed25519.pub
	echo "Copied newly generated public key to clipboard."

	xdg-open https://github.com/settings/keys &

	echo "1) Click 'New SSH Key'"
	echo "2) Enter a title for the key in the 'Title' field, maybe the hostname: $HOSTNAME"
	echo "3) Key type: 'Authentication key'"
	echo "4) Paste the key from your clipboard in the 'Key' field"
}

if [ ! -d "$HOME/.ssh" ]; then
	mkdir -p "$HOME/.ssh"
fi

current_key=$(ssh-add -l)

mapfile -t files < <(fd . --base-directory ~/.ssh/ --strip-cwd-prefix -E '*.pub' -E '*hosts*' -E 'config')

if [ ${#files[@]} -eq 0 ]; then
	echo "No SSH keys found in ~/.ssh/"

	setup-ssh-key
	echo "SSH key setup complete."

	mapfile -t files < <(fd . --base-directory ~/.ssh/ --strip-cwd-prefix -E '*.pub' -E '*hosts*' -E 'config')
fi

key_files=()
for file in "${files[@]}"; do
	if [ "$(ssh-keygen -l -f "$HOME/.ssh/$file")" = "$current_key" ]; then
		continue
	fi

	key_files+=("$file")
done

if [ ${#key_files[@]} -eq 0 ]; then
	echo "Your already loaded key is the only key available."
	exit 0
fi

key=$(printf "%s\n" "${key_files[@]}" | fzf -d "|" --cycle -i --reverse -1 --prompt="Select SSH key: ")
if [ -z "$key" ]; then
	exit 0
fi

if ! systemctl --user restart ssh-agent.service; then
	echo "Failed to restart ssh-agent.service"
	exit 1
fi

# Wait for SSH_AUTH_SOCK to point to a valid socket
while [ ! -S "$SSH_AUTH_SOCK" ]; do
	echo "Waiting for SSH_AUTH_SOCK..."
	sleep 0.1
done

ssh-add "$HOME/.ssh/$key"
